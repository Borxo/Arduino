<VisualMicro>
  <Program Name="LCD_I2C" Ext=".ino" Location="C:\Users\borxo\source\repos\Borxo\Arduino\LCD_I2C\LCD_I2C">
    <Compile ReCompileIfSourceIsNewer="1" IsDebugStart="1" IsGdb="0" CompilerErrors="0" ConfigurationName="Debug" UseConfigurationNameInBuildFolder="True" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\borxo\AppData\Local\Temp\VMBuilds\LCD_I2C\mega_atmega2560\Debug" SketchName="LCD_I2C" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 50;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE_CDCSerialClass 12;VM_DEBUGGER_TYPE_HARDWARESERIAL1 13;VM_DEBUGGER_TYPE_HARDWARESERIAL2 14;VM_DEBUGGER_TYPE_HARDWARESERIAL3 15;VM_DEBUGGER_TYPE_NET_UDP 16;VM_DEBUGGER_TYPE_USBAPI 17;VM_DEBUGGER_TYPE_SERIALUSB 18;VM_DEBUGGER_TYPE_MS430_SERIAL_ 19;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_HARDWARESERIAL;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="arduino16x" Package="arduino" Platform="avr" Architecture="avr">
      <Board Name="mega_atmega2560" Description="Arduino/Genuino Mega w/ ATmega2560 (Mega 2560)" CoreFolder="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" VariantFullPath="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\mega" McuIdePath="C:\Program Files (x86)\Arduino" McuSketchBookPath="C:\Users\borxo\Documents\Arduino" name="Arduino/Genuino Mega w/ ATmega2560 (Mega 2560)" vid.0="0x2341" pid.0="0x0010" vid.1="0x2341" pid.1="0x0042" vid.2="0x2A03" pid.2="0x0010" vid.3="0x2A03" pid.3="0x0042" vid.4="0x2341" pid.4="0x0210" vid.5="0x2341" pid.5="0x0242" upload.tool="avrdude" upload.maximum_data_size="8192" bootloader.tool="avrdude" bootloader.low_fuses="0xFF" bootloader.unlock_bits="0x3F" bootloader.lock_bits="0x0F" build.f_cpu="16000000L" build.core="arduino" build.variant="mega" build.board="AVR_MEGA2560" menu.cpu.atmega2560="ATmega2560 (Mega 2560)" menu.cpu.atmega2560.upload.protocol="wiring" menu.cpu.atmega2560.upload.maximum_size="253952" menu.cpu.atmega2560.upload.speed="115200" menu.cpu.atmega2560.bootloader.high_fuses="0xD8" menu.cpu.atmega2560.bootloader.extended_fuses="0xFD" menu.cpu.atmega2560.bootloader.file="stk500v2/stk500boot_v2_mega2560.hex" menu.cpu.atmega2560.build.mcu="atmega2560" menu.cpu.atmega2560.build.board="AVR_MEGA2560" menu.cpu.atmega1280="ATmega1280" menu.cpu.atmega1280.upload.protocol="arduino" menu.cpu.atmega1280.upload.maximum_size="126976" menu.cpu.atmega1280.upload.speed="57600" menu.cpu.atmega1280.bootloader.high_fuses="0xDA" menu.cpu.atmega1280.bootloader.extended_fuses="0xF5" menu.cpu.atmega1280.bootloader.file="atmega/ATmegaBOOT_168_atmega1280.hex" menu.cpu.atmega1280.build.mcu="atmega1280" menu.cpu.atmega1280.build.board="AVR_MEGA" runtime.ide.path="C:\Program Files (x86)\Arduino" runtime.os="windows" build.system.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\system" runtime.ide.version="10808" target_package="arduino" target_platform="avr" runtime.hardware.path="C:\Program Files (x86)\Arduino\hardware\arduino" originalid="mega" intellisense.tools.path="{runtime.tools.avr-gcc.path}\" intellisense.include.paths="{intellisense.tools.path}avr\include;{intellisense.tools.path}avr\include\avr;{intellisense.tools.path}lib\gcc\avr\4.8.1\include;{intellisense.tools.path}lib\gcc\avr\4.9.2\include;{intellisense.tools.path}lib\gcc\avr\4.9.3\include;" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.erase.params.verbose="-v" tools.atprogram.erase.params.quiet="-q" tools.atprogram.bootloader.params.verbose="-v" tools.atprogram.bootloader.params.quiet="-q" tools.atprogram.bootloader.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {bootloader.verbose}  program -c -f &quot;{runtime.ide.path}\hardware\arduino\avr\bootloaders\{bootloader.file}&quot;" version="1.6.23" compiler.warning_flags="-w" compiler.warning_flags.none="-w" compiler.warning_flags.default="" compiler.warning_flags.more="-Wall" compiler.warning_flags.all="-Wall -Wextra" compiler.path="{runtime.tools.avr-gcc.path}/bin/" compiler.c.cmd="avr-gcc" compiler.c.flags="-c -g -Os {compiler.warning_flags} -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects" compiler.c.elf.flags="{compiler.warning_flags} -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections" compiler.c.elf.cmd="avr-gcc" compiler.S.flags="-c -g -x assembler-with-cpp -flto -MMD" compiler.cpp.cmd="avr-g++" compiler.cpp.flags="-c -g -Os {compiler.warning_flags} -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto" compiler.ar.cmd="avr-gcc-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="avr-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O ihex -R .eeprom" compiler.elf2hex.cmd="avr-objcopy" compiler.ldflags="" compiler.size.cmd="avr-size" build.extra_flags="" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.S.extra_flags="" compiler.cpp.extra_flags="" compiler.ar.extra_flags="" compiler.objcopy.eep.extra_flags="" compiler.elf2hex.extra_flags="" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.S.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" archive_file_path="{build.path}/{archive_file}" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{archive_file_path}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; {compiler.c.elf.flags} -mmcu={build.mcu} {compiler.c.elf.extra_flags} -o &quot;{build.path}/{build.project_name}.elf&quot; {object_files} &quot;{build.path}/{archive_file}&quot; &quot;-L{build.path}&quot; -lm" recipe.objcopy.eep.pattern="&quot;{compiler.path}{compiler.objcopy.cmd}&quot; {compiler.objcopy.eep.flags} {compiler.objcopy.eep.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.eep&quot;" recipe.objcopy.hex.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.hex&quot;" recipe.output.tmp_file="{build.project_name}.hex" recipe.output.save_file="{build.project_name}.{build.variant}.hex" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*" recipe.size.regex.data="^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*" recipe.size.regex.eeprom="^(?:\.eeprom)\s+([0-9]+).*" preproc.includes.flags="-w -x c++ -M -MG -MP" recipe.preproc.includes="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.includes.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot;" preproc.macros.flags="-w -x c++ -E -CC" recipe.preproc.macros="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} {preproc.macros.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{preprocessed_file_path}&quot;" tools.avrdude.path="{runtime.tools.avrdude.path}" tools.avrdude.cmd.path="{path}/bin/avrdude" tools.avrdude.config.path="{path}/etc/avrdude.conf" tools.avrdude.network_cmd="{runtime.tools.arduinoOTA.path}/bin/arduinoOTA" tools.avrdude.upload.params.verbose="-v" tools.avrdude.upload.params.quiet="-q -q" tools.avrdude.upload.verify="" tools.avrdude.upload.params.noverify="-V" tools.avrdude.upload.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {upload.verbose} {upload.verify} -p{build.mcu} -c{upload.protocol} &quot;-P{serial.port}&quot; -b{upload.speed} -D &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.program.params.verbose="-v" tools.avrdude.program.params.quiet="-q -q" tools.avrdude.program.verify="" tools.avrdude.program.params.noverify="-V" tools.avrdude.program.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {program.verbose} {program.verify} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.erase.params.verbose="-v" tools.avrdude.erase.params.quiet="-q -q" tools.avrdude.erase.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {erase.verbose} -p{build.mcu} -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m" tools.avrdude.bootloader.params.verbose="-v" tools.avrdude.bootloader.params.quiet="-q -q" tools.avrdude.bootloader.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {bootloader.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{runtime.platform.path}/bootloaders/{bootloader.file}:i&quot; -Ulock:w:{bootloader.lock_bits}:m" tools.avrdude_remote.upload.pattern="/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -p{build.mcu}" tools.avrdude.upload.network_pattern="&quot;{network_cmd}&quot; -address {serial.port} -port {upload.network.port} -sketch &quot;{build.path}/{build.project_name}.hex&quot; -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}" build.usb_manufacturer="&quot;Unknown&quot;" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" vm.platform.root.path="d:\archivos de programa hhd(x86)\microsoft visual studio\2017\common7\ide\extensions\mbsqucm2.qs1\Micro Platforms\arduino16x" avrisp.name="AVR ISP" avrisp.communication="serial" avrisp.protocol="stk500v1" avrisp.program.protocol="stk500v1" avrisp.program.tool="avrdude" avrisp.program.extra_params="-P{serial.port}" avrispmkii.name="AVRISP mkII" avrispmkii.communication="usb" avrispmkii.protocol="stk500v2" avrispmkii.program.protocol="stk500v2" avrispmkii.program.tool="avrdude" avrispmkii.program.extra_params="-Pusb" usbtinyisp.name="USBtinyISP" usbtinyisp.protocol="usbtiny" usbtinyisp.program.tool="avrdude" usbtinyisp.program.extra_params="" arduinoisp.name="ArduinoISP" arduinoisp.protocol="arduinoisp" arduinoisp.program.tool="avrdude" arduinoisp.program.extra_params="" arduinoisporg.name="ArduinoISP.org" arduinoisporg.protocol="arduinoisporg" arduinoisporg.program.tool="avrdude" arduinoisporg.program.extra_params="" usbasp.name="USBasp" usbasp.communication="usb" usbasp.protocol="usbasp" usbasp.program.protocol="usbasp" usbasp.program.tool="avrdude" usbasp.program.extra_params="-Pusb" parallel.name="Parallel Programmer" parallel.protocol="dapa" parallel.force="true" parallel.program.tool="avrdude" parallel.program.extra_params="-F" arduinoasisp.name="Arduino as ISP" arduinoasisp.communication="serial" arduinoasisp.protocol="arduino" arduinoasisp.speed="19200" arduinoasisp.program.protocol="arduino" arduinoasisp.program.speed="19200" arduinoasisp.program.tool="avrdude" arduinoasisp.program.extra_params="-P{serial.port} -b{program.speed}" usbGemma.name="Arduino Gemma" usbGemma.protocol="arduinogemma" usbGemma.program.tool="avrdude" usbGemma.program.extra_params="" usbGemma.config.path="{runtime.platform.path}/bootloaders/gemma/avrdude.conf" buspirate.name="BusPirate as ISP" buspirate.communication="serial" buspirate.protocol="buspirate" buspirate.program.protocol="buspirate" buspirate.program.tool="avrdude" buspirate.program.extra_params="-P{serial.port}" stk500.name="Atmel STK500 development board" stk500.communication="serial" stk500.protocol="stk500" stk500.program.protocol="stk500" stk500.program.tool="avrdude" stk500.program.extra_params="-P{serial.port}" jtag3isp.name="Atmel JTAGICE3 (ISP mode)" jtag3isp.communication="usb" jtag3isp.protocol="jtag3isp" jtag3isp.program.protocol="jtag3isp" jtag3isp.program.tool="avrdude" jtag3isp.program.extra_params="" jtag3.name="Atmel JTAGICE3 (JTAG mode)" jtag3.communication="usb" jtag3.protocol="jtag3" jtag3.program.protocol="jtag3" jtag3.program.tool="avrdude" jtag3.program.extra_params="-B0.1" atmel_ice.name="Atmel-ICE (AVR)" atmel_ice.communication="usb" atmel_ice.protocol="atmelice_isp" atmel_ice.program.protocol="atmelice_isp" atmel_ice.program.tool="avrdude" atmel_ice.program.extra_params="-Pusb" runtime.tools.avr-gcc.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avr-gcc-5.4.0-atmel3.6.1-arduino2.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.tools-avr.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avrdude.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.avrdude-6.3.0-arduino14.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.arduinoOTA.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" runtime.tools.arduinoOTA-1.2.1.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" upload.protocol="wiring" upload.maximum_size="253952" upload.speed="115200" bootloader.high_fuses="0xD8" bootloader.extended_fuses="0xFD" bootloader.file="stk500v2/stk500boot_v2_mega2560.hex" build.mcu="atmega2560" runtime.vm.boardinfo.id="mega_atmega2560" runtime.vm.boardinfo.name="mega_atmega2560" runtime.vm.boardinfo.desc="Arduino/Genuino Mega w/ ATmega2560 (Mega 2560)" runtime.vm.boardinfo.src_location="C:\Program Files (x86)\Arduino\hardware\arduino\avr" ide.hint="Use installed IDE. Provides built-in hardware, reference/help and libraries." ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.revision_name="1.9.0" ide.default.version="10800" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="Arduino.h" ide.exe_name="arduino" ide.recipe.preproc.defines.flags="-w -x c++ -E -dM" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.builder.exe="arduinobuilder.exe" ide.builder.name="Arduino Builder" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" ide.help.reference.path="reference" ide.help.reference.path2="reference\www.arduino.cc\en\Reference" ide.help.reference.serial="reference\www.arduino.cc\en\Serial" ide.location.preferences.portable="{runtime.ide.path}\portable" ide.location.preferences.arduinoData="{runtime.sketchbook.path}\ArduinoData" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}\java\bin" ide.appid="arduino16x" location.sketchbook="C:\Users\borxo\Documents\Arduino" build.core.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" build.core.parentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores" build.core.coresparentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr" build.core.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" vm.core.include="arduino.h" vm.boardsource.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr" runtime.platform.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr" vm.platformname.name="avr" build.arch="AVR" builder.noino="false" build.architecture="avr" vmresolved.compiler.path="C:\Program Files (x86)\Arduino\hardware\tools\avr\bin\" vmresolved.tools.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" build.variant.vmresolved.name="mega" build.variant.vmresolved.full_path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\mega" vm.runtime.compiler.cached_cores_path="C:\Users\borxo\AppData\Local\Temp\VMBCore\arduino16x" vm.runtime.compiler.showwarnings="false" vm.runtime.compiler.showwarnings_core="false" vm.runtime.compiler.showwarnings_library="false" vm.runtime.upload.verbose="false" vm.runtime.upload.verify="false" vm.runtime.build.intermediate_output_path="C:\Users\borxo\source\repos\Borxo\Arduino\LCD_I2C\LCD_I2C\Debug\" vm.runtime.build.final_output_path="C:\Users\borxo\source\repos\Borxo\Arduino\LCD_I2C\Debug\" compiler.always_include_sketchfolder="true" vm.runtime.compiler.auto_discover_includes="true" vm.runtime.compiler.allow_library_debugging="false" serial.port.file="COM4" serial.port="COM4" serial.port.num="4" extra.time.local="1553457893" extra.time.utc="1553454293" extra.time.dst="3600" extra.time.zone="-3600" serial.port.caption="COM4   - Arduino Mega 2560" serial.Caption="Arduino Mega 2560 (COM4)" serial.ClassGuid="{4d36e978-e325-11ce-bfc1-08002be10318}" serial.CompatibleID.value0="USB\Class_02" serial.ConfigManagerErrorCode="0" serial.ConfigManagerUserConfig="False" serial.CreationClassName="Win32_PnPEntity" serial.Description="Arduino Mega 2560" serial.DeviceID="USB\VID_2341&amp;PID_0042\75430333137351408221" serial.HardwareID.value0="USB\VID_2341&amp;PID_0042" serial.Manufacturer="Arduino LLC (www.arduino.cc)" serial.Name="Arduino Mega 2560 (COM4)" serial.PNPClass="Ports" serial.PNPDeviceID="USB\VID_2341&amp;PID_0042\75430333137351408221" serial.Present="True" serial.Service="usbser" serial.Status="OK" serial.SystemCreationClassName="Win32_ComputerSystem" serial.SystemName="MSI" serial.vid="0x2341" serial.pid="0x0042" serial.vidpid="23410042" serial.vid_pid="0x2341_0x0042" serial.iserial="75430333137351408221" serial.port.iserial="75430333137351408221" build.project_name="LCD_I2C.ino" build.project_path="C:\Users\borxo\source\repos\Borxo\Arduino\LCD_I2C\LCD_I2C" sketch_path="C:\Users\borxo\source\repos\Borxo\Arduino\LCD_I2C\LCD_I2C" ProjectDir="C:\Users\borxo\source\repos\Borxo\Arduino\LCD_I2C\LCD_I2C\" build.path="C:\Users\borxo\AppData\Local\Temp\VMBuilds\LCD_I2C\mega_atmega2560\Debug" vm.runtime.compile.skip_library_file_if_exists_in_project="false" vm.runtime.compiler.auto_discover_includes_cache="true" build.vm.build.vmdebug="1" build.vm.build.isgdb="0" build.vm.build.optimised="1" vm.last.buildpath="C:\Users\borxo\AppData\Local\Temp\VMBuilds\LCD_I2C\mega_atmega2560\Debug" />
    </Platform>
    <Debug EnableBreak="1" DebugEnabled="1" InBreakLiveView="1" PerfStats="1" IsGdb="0" RemotePortSpeedWrittenToDebugSource="115200" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="LCD_I2C.ino, línea 37" Id="216be78c-23b9-4120-bd22-f1239387b090" Enabled="1" Message="  Millis is currently {millis()}.&#xD;&#xA;    This tutorial debug trace point prints a message every 250ms&#xD;&#xA;    The break point property called 'Continue Execution' controls if code should pause here and wait for you to click 'Continue'.&#xD;&#xA;    To stop debug, click stop debugging or close/stop the serial monitor.&#xD;&#xA;    When debug ends, serial debug will continue to break/pause the mcu or transmit trace message, wifi debug will not.&#xD;&#xA;    This breakpoint exists at the start of the loop() function, where you see a red dot.&#xD;&#xA;    The red dot is a ‘breakpoint’. Edit the properties of a breakpoint by right clicking it or open the 'Debug&gt;Other Windows&gt;Breakpoint List'&#xD;&#xA;    This breakpoint is automatically set by Visual Micro to demonstrate the Arduino debugger.&#xD;&#xA;    Add your own breakpoints by placing the cursor on any code line and pressing F9. Press F9 again to delete the breakpoint.&#xD;&#xA;    Read more about the Visual Micro debugger at https://www.visualmicro.com/page/Debugging-for-Arduino.aspx&#xD;&#xA;    Take some time to learn about debugging, it’s worth it!&#xD;&#xA;    To switch the demo breakpoint and other tips off, deselect Visual Micro&gt;General&gt;Tutorial Mode.&#xD;&#xA;    Switch debugging off by changing from tool bar (Configuratin) from 'Debug' to 'Release'" MessageTextType="0" PreProcessedMessage="  Millis is currently {0}.&#xD;&#xA;    This tutorial debug trace point prints a message every 250ms&#xD;&#xA;    The break point property called 'Continue Execution' controls if code should pause here and wait for you to click 'Continue'.&#xD;&#xA;    To stop debug, click stop debugging or close/stop the serial monitor.&#xD;&#xA;    When debug ends, serial debug will continue to break/pause the mcu or transmit trace message, wifi debug will not.&#xD;&#xA;    This breakpoint exists at the start of the loop() function, where you see a red dot.&#xD;&#xA;    The red dot is a ‘breakpoint’. Edit the properties of a breakpoint by right clicking it or open the 'Debug&gt;Other Windows&gt;Breakpoint List'&#xD;&#xA;    This breakpoint is automatically set by Visual Micro to demonstrate the Arduino debugger.&#xD;&#xA;    Add your own breakpoints by placing the cursor on any code line and pressing F9. Press F9 again to delete the breakpoint.&#xD;&#xA;    Read more about the Visual Micro debugger at https://www.visualmicro.com/page/Debugging-for-Arduino.aspx&#xD;&#xA;    Take some time to learn about debugging, it’s worth it!&#xD;&#xA;    To switch the demo breakpoint and other tips off, deselect Visual Micro&gt;General&gt;Tutorial Mode.&#xD;&#xA;    Switch debugging off by changing from tool bar (Configuratin) from 'Debug' to 'Release'" Condition="millis()&gt;0 || millis()&gt;1" ConditionType="1" CurrentHits="0" File="c:\users\borxo\source\repos\borxo\arduino\lcd_i2c\lcd_i2c\lcd_i2c.ino" FileLine="37" FileColumn="1" FunctionName="" FunctionLineOffset="1" FunctionColumnOffset="1" HitCountTarget="250" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='216be78c-23b9-4120-bd22-f1239387b090'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>30			lcd.setCursor(3, 1);
31			digitalWrite(led1, HIGH);
32			lcd.print("Verde");
33			delay(1000);
34		}
35	
36	
--&gt;37	void loop() 
38		{
39	
40			ValorA = digitalRead(ButtonA);
41			ValorB = digitalRead(ButtonB);
42	
43			if (ValorA == HIGH)
44				{
45					lcd.clear();
46					lcd.setCursor(3, 1);
</Source>
        <MessageVariables>
          <MessageVariable Name="millis()" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="2" Name="LCD_I2C.ino, línea 44" Id="79d6a79d-8c32-42ed-91b0-5af393573d93" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\borxo\source\repos\borxo\arduino\lcd_i2c\lcd_i2c\lcd_i2c.ino" FileLine="44" FileColumn="1" FunctionName="loop()" FunctionLineOffset="7" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='66e3fe25-def5-4c3a-861c-389efbb173fd'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>37	void loop() 
38		{
39	
40			ValorA = digitalRead(ButtonA);
41			ValorB = digitalRead(ButtonB);
42	
43			if (ValorA == HIGH)
--&gt;44				{
45					lcd.clear();
46					lcd.setCursor(3, 1);
47					lcd.print("Rojo");
48					digitalWrite(led, HIGH);
49					digitalWrite(led1, LOW);
50				}
51	
52		if (ValorB == HIGH)
53			{
</Source>
      </BreakPoint>
      <BreakPoint Index="3" Name="LCD_I2C.ino, línea 41" Id="e595ec17-c837-4e7d-9fc9-81cde2a2a7bf" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\borxo\source\repos\borxo\arduino\lcd_i2c\lcd_i2c\lcd_i2c.ino" FileLine="41" FileColumn="1" FunctionName="loop()" FunctionLineOffset="4" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='aa7936b2-fcf9-4ec4-80fb-9c7a82e08444'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>34		}
35	
36	
37	void loop() 
38		{
39	
40			ValorA = digitalRead(ButtonA);
--&gt;41			ValorB = digitalRead(ButtonB);
42	
43			if (ValorA == HIGH)
44				{
45					lcd.clear();
46					lcd.setCursor(3, 1);
47					lcd.print("Rojo");
48					digitalWrite(led, HIGH);
49					digitalWrite(led1, LOW);
50				}
</Source>
      </BreakPoint>
      <BreakPoint Index="4" Name="LCD_I2C.ino, línea 40" Id="e7c5c821-9c10-410a-b7a4-7e1be8e053c2" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\borxo\source\repos\borxo\arduino\lcd_i2c\lcd_i2c\lcd_i2c.ino" FileLine="40" FileColumn="1" FunctionName="loop()" FunctionLineOffset="3" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='999436b7-6d8e-48df-890b-2024d8e8cf97'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>33			delay(1000);
34		}
35	
36	
37	void loop() 
38		{
39	
--&gt;40			ValorA = digitalRead(ButtonA);
41			ValorB = digitalRead(ButtonB);
42	
43			if (ValorA == HIGH)
44				{
45					lcd.clear();
46					lcd.setCursor(3, 1);
47					lcd.print("Rojo");
48					digitalWrite(led, HIGH);
49					digitalWrite(led1, LOW);
</Source>
      </BreakPoint>
      <BreakPoint Index="5" Name="LCD_I2C.ino, línea 43" Id="5316fdc4-db0d-4180-857b-176786c1c3ad" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\borxo\source\repos\borxo\arduino\lcd_i2c\lcd_i2c\lcd_i2c.ino" FileLine="43" FileColumn="1" FunctionName="loop()" FunctionLineOffset="6" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='90f33bfa-23a1-4a6e-91a9-b9182b969473'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>36	
37	void loop() 
38		{
39	
40			ValorA = digitalRead(ButtonA);
41			ValorB = digitalRead(ButtonB);
42	
--&gt;43			if (ValorA == HIGH)
44				{
45					lcd.clear();
46					lcd.setCursor(3, 1);
47					lcd.print("Rojo");
48					digitalWrite(led, HIGH);
49					digitalWrite(led1, LOW);
50				}
51	
52		if (ValorB == HIGH)
</Source>
      </BreakPoint>
      <BreakPoint Index="6" Name="LCD_I2C.ino, línea 45" Id="cdefeab9-e9df-4204-997f-b3929ec10fb4" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\borxo\source\repos\borxo\arduino\lcd_i2c\lcd_i2c\lcd_i2c.ino" FileLine="45" FileColumn="1" FunctionName="loop()" FunctionLineOffset="8" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='0feb9e99-3b49-445d-92c4-a30f8369fc99'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>38		{
39	
40			ValorA = digitalRead(ButtonA);
41			ValorB = digitalRead(ButtonB);
42	
43			if (ValorA == HIGH)
44				{
--&gt;45					lcd.clear();
46					lcd.setCursor(3, 1);
47					lcd.print("Rojo");
48					digitalWrite(led, HIGH);
49					digitalWrite(led1, LOW);
50				}
51	
52		if (ValorB == HIGH)
53			{
54				lcd.clear();
</Source>
      </BreakPoint>
      <BreakPoint Index="7" Name="LCD_I2C.ino, línea 46" Id="6e093074-1ed7-45a8-bf04-81b8fbacb830" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\borxo\source\repos\borxo\arduino\lcd_i2c\lcd_i2c\lcd_i2c.ino" FileLine="46" FileColumn="1" FunctionName="loop()" FunctionLineOffset="9" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='75dadcc8-3d73-4bea-ae7f-e62532ff2f49'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>39	
40			ValorA = digitalRead(ButtonA);
41			ValorB = digitalRead(ButtonB);
42	
43			if (ValorA == HIGH)
44				{
45					lcd.clear();
--&gt;46					lcd.setCursor(3, 1);
47					lcd.print("Rojo");
48					digitalWrite(led, HIGH);
49					digitalWrite(led1, LOW);
50				}
51	
52		if (ValorB == HIGH)
53			{
54				lcd.clear();
55				lcd.setCursor(3, 1);
</Source>
      </BreakPoint>
      <BreakPoint Index="8" Name="LCD_I2C.ino, línea 47" Id="133a11b4-c976-4cdc-83da-8afff3801b98" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\borxo\source\repos\borxo\arduino\lcd_i2c\lcd_i2c\lcd_i2c.ino" FileLine="47" FileColumn="1" FunctionName="loop()" FunctionLineOffset="10" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='2dbf8997-fbb0-4d08-9169-4b2e7f71fbad'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>40			ValorA = digitalRead(ButtonA);
41			ValorB = digitalRead(ButtonB);
42	
43			if (ValorA == HIGH)
44				{
45					lcd.clear();
46					lcd.setCursor(3, 1);
--&gt;47					lcd.print("Rojo");
48					digitalWrite(led, HIGH);
49					digitalWrite(led1, LOW);
50				}
51	
52		if (ValorB == HIGH)
53			{
54				lcd.clear();
55				lcd.setCursor(3, 1);
56				lcd.print("Verde");
</Source>
      </BreakPoint>
      <BreakPoint Index="9" Name="LCD_I2C.ino, línea 48" Id="4af1fc6a-7b0a-4ecd-876f-d9d5e86e926f" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\borxo\source\repos\borxo\arduino\lcd_i2c\lcd_i2c\lcd_i2c.ino" FileLine="48" FileColumn="1" FunctionName="loop()" FunctionLineOffset="11" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='5abd3b22-0b31-499f-ad56-d22816d3875c'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>41			ValorB = digitalRead(ButtonB);
42	
43			if (ValorA == HIGH)
44				{
45					lcd.clear();
46					lcd.setCursor(3, 1);
47					lcd.print("Rojo");
--&gt;48					digitalWrite(led, HIGH);
49					digitalWrite(led1, LOW);
50				}
51	
52		if (ValorB == HIGH)
53			{
54				lcd.clear();
55				lcd.setCursor(3, 1);
56				lcd.print("Verde");
57				digitalWrite(led, LOW);
</Source>
      </BreakPoint>
      <BreakPoint Index="10" Name="LCD_I2C.ino, línea 49" Id="71449015-b3cd-489b-9a2b-8fedb65f50b2" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\borxo\source\repos\borxo\arduino\lcd_i2c\lcd_i2c\lcd_i2c.ino" FileLine="49" FileColumn="1" FunctionName="loop()" FunctionLineOffset="12" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='acd14934-a4d5-4982-bebb-4e2f954996de'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>42	
43			if (ValorA == HIGH)
44				{
45					lcd.clear();
46					lcd.setCursor(3, 1);
47					lcd.print("Rojo");
48					digitalWrite(led, HIGH);
--&gt;49					digitalWrite(led1, LOW);
50				}
51	
52		if (ValorB == HIGH)
53			{
54				lcd.clear();
55				lcd.setCursor(3, 1);
56				lcd.print("Verde");
57				digitalWrite(led, LOW);
58				digitalWrite(led1, HIGH);
</Source>
      </BreakPoint>
      <BreakPoint Index="11" Name="LCD_I2C.ino, línea 51" Id="81b71c3c-3edb-4a40-9ef2-6ae709a559c6" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\borxo\source\repos\borxo\arduino\lcd_i2c\lcd_i2c\lcd_i2c.ino" FileLine="51" FileColumn="1" FunctionName="loop()" FunctionLineOffset="14" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='546660a8-40eb-415e-81ec-ed7243edbb4b'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>44				{
45					lcd.clear();
46					lcd.setCursor(3, 1);
47					lcd.print("Rojo");
48					digitalWrite(led, HIGH);
49					digitalWrite(led1, LOW);
50				}
--&gt;51	
52		if (ValorB == HIGH)
53			{
54				lcd.clear();
55				lcd.setCursor(3, 1);
56				lcd.print("Verde");
57				digitalWrite(led, LOW);
58				digitalWrite(led1, HIGH);
59			}
60	
</Source>
      </BreakPoint>
      <BreakPoint Index="12" Name="LCD_I2C.ino, línea 50" Id="f2c17c67-cc24-4125-b21e-49922970a917" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\borxo\source\repos\borxo\arduino\lcd_i2c\lcd_i2c\lcd_i2c.ino" FileLine="50" FileColumn="1" FunctionName="loop()" FunctionLineOffset="13" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='213216b8-3738-4987-bd3a-1d43ee4108ee'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>43			if (ValorA == HIGH)
44				{
45					lcd.clear();
46					lcd.setCursor(3, 1);
47					lcd.print("Rojo");
48					digitalWrite(led, HIGH);
49					digitalWrite(led1, LOW);
--&gt;50				}
51	
52		if (ValorB == HIGH)
53			{
54				lcd.clear();
55				lcd.setCursor(3, 1);
56				lcd.print("Verde");
57				digitalWrite(led, LOW);
58				digitalWrite(led1, HIGH);
59			}
</Source>
      </BreakPoint>
      <BreakPoint Index="13" Name="LCD_I2C.ino, línea 52" Id="58bcff01-3598-447c-92c5-620306bade5d" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\borxo\source\repos\borxo\arduino\lcd_i2c\lcd_i2c\lcd_i2c.ino" FileLine="52" FileColumn="1" FunctionName="loop()" FunctionLineOffset="15" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='fe9608a9-6940-405d-93da-bb8c2fc33997'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>45					lcd.clear();
46					lcd.setCursor(3, 1);
47					lcd.print("Rojo");
48					digitalWrite(led, HIGH);
49					digitalWrite(led1, LOW);
50				}
51	
--&gt;52		if (ValorB == HIGH)
53			{
54				lcd.clear();
55				lcd.setCursor(3, 1);
56				lcd.print("Verde");
57				digitalWrite(led, LOW);
58				digitalWrite(led1, HIGH);
59			}
60	
61		}
</Source>
      </BreakPoint>
      <BreakPoint Index="14" Name="LCD_I2C.ino, línea 53" Id="0cf14410-3fc8-4fe9-9de7-05544d403858" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\borxo\source\repos\borxo\arduino\lcd_i2c\lcd_i2c\lcd_i2c.ino" FileLine="53" FileColumn="1" FunctionName="loop()" FunctionLineOffset="16" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='65b99d80-9385-4e4d-a3c1-1dc1948349ff'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>46					lcd.setCursor(3, 1);
47					lcd.print("Rojo");
48					digitalWrite(led, HIGH);
49					digitalWrite(led1, LOW);
50				}
51	
52		if (ValorB == HIGH)
--&gt;53			{
54				lcd.clear();
55				lcd.setCursor(3, 1);
56				lcd.print("Verde");
57				digitalWrite(led, LOW);
58				digitalWrite(led1, HIGH);
59			}
60	
61		}
</Source>
      </BreakPoint>
      <BreakPoint Index="15" Name="LCD_I2C.ino, línea 55" Id="dce3fed5-b094-490b-b350-540e94a27b9e" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\borxo\source\repos\borxo\arduino\lcd_i2c\lcd_i2c\lcd_i2c.ino" FileLine="55" FileColumn="1" FunctionName="loop()" FunctionLineOffset="18" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='ec0938a8-5838-4383-ac9f-3a277e2977c2'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>48					digitalWrite(led, HIGH);
49					digitalWrite(led1, LOW);
50				}
51	
52		if (ValorB == HIGH)
53			{
54				lcd.clear();
--&gt;55				lcd.setCursor(3, 1);
56				lcd.print("Verde");
57				digitalWrite(led, LOW);
58				digitalWrite(led1, HIGH);
59			}
60	
61		}
</Source>
      </BreakPoint>
      <BreakPoint Index="16" Name="LCD_I2C.ino, línea 56" Id="2cfe740e-a0f5-44c4-b743-128c0fc17ab0" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\borxo\source\repos\borxo\arduino\lcd_i2c\lcd_i2c\lcd_i2c.ino" FileLine="56" FileColumn="1" FunctionName="loop()" FunctionLineOffset="19" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='8ffcf5da-6b5a-4207-8538-2379ed9f3060'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>49					digitalWrite(led1, LOW);
50				}
51	
52		if (ValorB == HIGH)
53			{
54				lcd.clear();
55				lcd.setCursor(3, 1);
--&gt;56				lcd.print("Verde");
57				digitalWrite(led, LOW);
58				digitalWrite(led1, HIGH);
59			}
60	
61		}
</Source>
      </BreakPoint>
      <BreakPoint Index="17" Name="LCD_I2C.ino, línea 54" Id="b88a0bb1-e453-4c31-ad23-66510ae90ca6" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\borxo\source\repos\borxo\arduino\lcd_i2c\lcd_i2c\lcd_i2c.ino" FileLine="54" FileColumn="1" FunctionName="loop()" FunctionLineOffset="17" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='d22b9e3c-31b4-4329-a5f7-40fd6bd5f25c'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>47					lcd.print("Rojo");
48					digitalWrite(led, HIGH);
49					digitalWrite(led1, LOW);
50				}
51	
52		if (ValorB == HIGH)
53			{
--&gt;54				lcd.clear();
55				lcd.setCursor(3, 1);
56				lcd.print("Verde");
57				digitalWrite(led, LOW);
58				digitalWrite(led1, HIGH);
59			}
60	
61		}
</Source>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>